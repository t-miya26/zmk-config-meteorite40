#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>

#define DEFAULT_CPI 1000        // トラックボールの感度
#define ROTATION_ANGLE 30       // トラックボールのY軸を回転
#define CLIPPER_THRESHOLD 40    // スクロール時に斜めの値をクリップ

#define SCROLL_LAYER 2          // スクロールを有効にするレイヤー
#define INVERT_X 1              // X軸のスクロールの反転
#define INVERT_Y 0              // Y軸のスクロールの反転

#define SCALING_MODE 1          // 0: 無効, 1: 有効
#define SCALE_COEFF_MILLI 100   // 係数 例: 100 -> 0.1

#define POLL_PERIOD_MS 20       // キースキャンのポーリング周期（ms）
#define DEBOUNCE_MS 7           // デバウンス時間 (ms)

&spi0 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    cs-gpios = <&gpio1 15 GPIO_ACTIVE_LOW>; // CS: P1.15

    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";

    trackball: pmw3610@0 {
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio1 12 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; // MOTION: P1.12
        cpi = <DEFAULT_CPI>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        force-awake;
        //force-awake-4ms-mode;
        status = "okay";
    };
};

&pinctrl {
    spi0_default: spi0_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 13)>,   // SCLK:  P1.13
                    <NRF_PSEL(SPIM_MOSI, 1, 14)>,  // SDIO:  P1.14
                    <NRF_PSEL(SPIM_MISO, 1, 14)>;  // MISOは同じSDIO兼用
        };
    };

    spi0_sleep: spi0_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 13)>,
                    <NRF_PSEL(SPIM_MOSI, 1, 14)>,
                    <NRF_PSEL(SPIM_MISO, 1, 14)>;
            low-power-enable;
        };
    };
};

/ {
    meteorite40_scan: kscan0 {
        compatible = "zmk,kscan-gpio-charlieplex";
        gpios = <&gpio0 2 GPIO_ACTIVE_HIGH>,  // ID0: P0.02
                <&gpio0 3 GPIO_ACTIVE_HIGH>,  // ID1: P0.03
                <&gpio0 28 GPIO_ACTIVE_HIGH>, // ID2: P0.28
                <&gpio0 29 GPIO_ACTIVE_HIGH>, // ID3: P0.29
                <&gpio0 4 GPIO_ACTIVE_HIGH>,  // ID4: P0.04
                <&gpio0 5 GPIO_ACTIVE_HIGH>,  // ID5: P0.05
                <&gpio1 11 GPIO_ACTIVE_HIGH>; // ID6: P1.11

        interrupt-gpios = <&gpio0 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>; // Changed to P0.09 (NFC1)
        debounce-press-ms = <DEBOUNCE_MS>;
        debounce-release-ms = <DEBOUNCE_MS>;
        poll-period-ms = <POLL_PERIOD_MS>;
        wakeup-source;
    };

    /*
    xy_transf: xy_transf {
        compatible = "zmk,input-processor-transform";
        #input-processor-cells = <1>;
        type = <INPUT_EV_REL>;
        x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
        y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
    };

    xy_scaler: xy_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_X>, <INPUT_REL_Y>;
        track-remainders;
    };

    x_scaler: x_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_X>;
    };
    */

    to_wheel: to_wheel {
        compatible = "zmk,input-processor-code-mapper";
        #input-processor-cells = <0>;
        type = <INPUT_EV_REL>;
        map = <INPUT_REL_X INPUT_REL_HWHEEL>,
              <INPUT_REL_Y INPUT_REL_WHEEL>;
    };

    scaler0: scaler@0 {
        compatible = "zmk,input-processor-motion-scaler";
        #input-processor-cells = <2>;
        scaling-mode = <SCALING_MODE>;
        scale-coeff-milli = <SCALE_COEFF_MILLI>;
    };

    sensor_rotation: sensor_rotation {
        compatible = "zmk,input-processor-sensor-rotation";
        #input-processor-cells = <0>;
        rotation-angle = <ROTATION_ANGLE>;
    };

    xy_clipper: xy_clipper {
        compatible = "zmk,input-processor-xy-clipper";
        #input-processor-cells = <0>;
        threshold = <CLIPPER_THRESHOLD>;
        invert-x = <INVERT_X>;
        invert-y = <INVERT_Y>;
    };

    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball>;

        input-processors = <&sensor_rotation>, <&scaler0>;

        scroll {
            layers = <SCROLL_LAYER>;
            input-processors = <&sensor_rotation>,
                               <&xy_clipper>,
                               <&to_wheel>;
        };
    };
};
